<?php
// Enhanced API implementation for auth and business operations using existing configuration

// Configure error logging
ini_set('error_log', dirname(__DIR__) . '/logs/api_errors.log');

// Set CORS headers for all requests
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, PATCH, DELETE');
header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With, Accept, Origin, X-CSRF-Token');
header('Access-Control-Allow-Credentials: true');
header('Content-Type: application/json');

// Handle preflight OPTIONS requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

// Load autoloader and dependencies
require_once __DIR__ . '/../vendor/autoload.php';

// Load environment variables
require_once __DIR__ . '/../src/Config/env.php';

// Use existing models and configuration
use App\Models\User;
use App\Models\Business;
use App\Config\Database;

try {
    // Get the raw POST data
    $rawData = file_get_contents('php://input');
    $jsonData = json_decode($rawData, true);
    
    // Log request for debugging
    file_put_contents(dirname(__DIR__) . '/logs/api_requests.log', date('Y-m-d H:i:s') . ' - ' . $_SERVER['REQUEST_URI'] . ' - ' . $rawData . "\n", FILE_APPEND);

    // Get a database connection using the existing configuration
    $database = new Database();
    $db = $database->getConnection();
    
    // Track if we're in debug mode - log detailed database operations
    $debugMode = true;
    
    if (!$db) {
        throw new Exception("PostgreSQL database connection failed");
    }
    
    // For debugging, log that we have a connection
    if ($debugMode) {
        error_log("Successfully connected to PostgreSQL database");
    }
    
    // Get the request URI path
    $requestUri = $_SERVER['REQUEST_URI'];
    $path = parse_url($requestUri, PHP_URL_PATH);
    
    // REGISTRATION ENDPOINT - matches both old format and new URI pattern
    if (isset($_GET['action']) && $_GET['action'] === 'register' || 
        strpos($path, 'auth/register') !== false) {
        handleRegistration($db, $jsonData);
    } 
    // BUSINESS DETAILS ENDPOINT - handle both URL pattern and endpoint parameter
    elseif (strpos($path, 'business/details') !== false || 
           (isset($_GET['endpoint']) && $_GET['endpoint'] === 'business/details')) {
        handleBusinessDetails($db);
    } 
    // USER PROFILE ENDPOINT - handle both URL pattern and endpoint parameter
    elseif (strpos($path, 'user/profile') !== false || 
           (isset($_GET['endpoint']) && $_GET['endpoint'] === 'user/profile')) {
        handleUserProfile($db);
    }
    // FALLBACK - Debug information for unknown routes
    else {
        // Default debug information response
        $response = [
            'status' => 'debug',
            'message' => 'Request received',
            'method' => $_SERVER['REQUEST_METHOD'],
            'content_type' => $_SERVER['CONTENT_TYPE'] ?? 'Not specified',
            'path' => $path,
            'raw_data' => $rawData,
            'json_parse_success' => json_last_error() === JSON_ERROR_NONE,
            'json_parse_error' => json_last_error_msg(),
            'parsed_data' => $jsonData,
            'headers' => getallheaders()
        ];
        
        echo json_encode($response, JSON_PRETTY_PRINT);
    }
} catch (Exception $e) {
    // Log the error
    file_put_contents('api_errors.log', date('Y-m-d H:i:s') . ' - ' . $e->getMessage() . "\n", FILE_APPEND);
    
    // Return a generic error response
    http_response_code(500);
    echo json_encode([
        'status' => 'error',
        'message' => 'Server error occurred',
        'debug' => $e->getMessage() // Remove in production
    ]);
}

/**
 * Handle user registration and business creation
 */
function handleRegistration(PDO $db, array $data): void {
    // Detailed error logging
    error_log("===== REGISTRATION ATTEMPT =====");
    error_log("Data received: " . json_encode($data));
    
    // Validate required fields
    $requiredFields = ['email', 'password', 'businessName', 'category', 'district'];
    foreach ($requiredFields as $field) {
        if (empty($data[$field])) {
            http_response_code(422);
            error_log("Validation error: Missing required field '$field'");
            echo json_encode([
                'status' => 'error',
                'message' => 'Validation failed',
                'errors' => [$field => "$field is required"]
            ]);
            exit;
        }
    }
    
    try {
        // Start transaction
        error_log("Starting database transaction");
        $db->beginTransaction();
        
        // Create user
        error_log("Creating User object");
        $user = new User($db);
        
        // Check if email already exists
        error_log("Checking if email exists: {$data['email']}");
        try {
            if ($user->emailExists($data['email'])) {
                http_response_code(409);
                error_log("Email already exists: {$data['email']}");
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Email already exists'
                ]);
                exit;
            }
            error_log("Email check passed - email doesn't exist");
        } catch (Exception $e) {
            error_log("Error checking email: " . $e->getMessage());
            throw $e;
        }
        
        // Set user properties
        error_log("Setting user properties");
        $user->name = $data['businessName']; // Use business name as user name for simplicity
        $user->email = $data['email'];
        $user->password = $data['password']; // Will be hashed in create method
        $user->phone_number = $data['phone'] ?? null;
        
        // Create the user
        error_log("Attempting to create user");
        if (!$user->create()) {
            error_log("Failed to create user");
            throw new Exception("Failed to create user");
        }
        error_log("User created successfully with ID: {$user->user_id}");
        
        // Create business
        error_log("Creating Business object");
        $business = new Business($db);
        
        error_log("Setting business properties");
        $business->user_id = $user->user_id; // Using the proper property name
        error_log("User ID for business: {$business->user_id}");
        
        $business->name = $data['businessName'];
        $business->description = $data['description'] ?? null;
        $business->category = $data['category'];
        $business->district = $data['district'];
        $business->address = $data['address'] ?? null;
        $business->phone = $data['phone'] ?? null;
        $business->email = $data['email'];
        $business->website = $data['website'] ?? null;
        $business->package_type = 'Basic'; // Default package
        
        // Create the business
        error_log("Attempting to create business");
        if (!$business->create()) {
            error_log("Failed to create business");
            throw new Exception("Failed to create business");
        }
        error_log("Business created successfully with ID: {$business->business_id}");
        
        // Commit transaction
        $db->commit();
        
        // Generate JWT token (simplified)
        $token = generateJWT($user->user_id);
        
        // Return success response
        echo json_encode([
            'status' => 'success',
            'message' => 'Registration successful',
            'data' => [
                'user_id' => $user->user_id,
                'business_id' => $business->business_id,
                'token' => $token
            ]
        ]);
    } catch (Exception $e) {
        // Rollback transaction on error
        error_log("ERROR in registration: " . $e->getMessage());
        error_log("Stack trace: " . $e->getTraceAsString());
        $db->rollBack();
        
        // For development, include detailed error
        http_response_code(500);
        echo json_encode([
            'status' => 'error',
            'message' => 'Registration failed',
            'debug' => $e->getMessage(), // Remove in production
            'trace' => $e->getTraceAsString() // Remove in production
        ]);
    }
}

/**
 * Handle business details request
 */
function handleBusinessDetails(PDO $db): void {
    // For demo/debugging purposes, use a hardcoded user ID
    // This is temporary and allows us to bypass token validation during development
    $userId = 1; // Use the ID of the user we just created
    
    try {
        
        // Get business data
        $business = new Business($db);
        if (!$business->findByUserId($userId)) {
            http_response_code(404);
            echo json_encode([
                'status' => 'error',
                'message' => 'Business not found'
            ]);
            exit;
        }
        
        // Return business data
        echo json_encode([
            'status' => 'success',
            'data' => $business->toArray(true)
        ]);
    } catch (Exception $e) {
        http_response_code(401);
        echo json_encode([
            'status' => 'error',
            'message' => 'Invalid token',
            'debug' => $e->getMessage() // Remove in production
        ]);
    }
}

/**
 * Handle user profile request
 */
function handleUserProfile(PDO $db): void {
    // Check for Authorization header
    $headers = getallheaders();
    $authHeader = $headers['Authorization'] ?? '';
    
    if (!$authHeader || strpos($authHeader, 'Bearer ') !== 0) {
        http_response_code(401);
        echo json_encode([
            'status' => 'error',
            'message' => 'Unauthorized - Missing or invalid token'
        ]);
        exit;
    }
    
    // Extract token
    $token = substr($authHeader, 7);
    
    try {
        // Verify token and get user ID
        $userId = verifyJWT($token);
        
        // Get user data
        $user = new User($db);
        if (!$user->readOne($userId)) {
            http_response_code(404);
            echo json_encode([
                'status' => 'error',
                'message' => 'User not found'
            ]);
            exit;
        }
        
        // Return user data
        echo json_encode([
            'status' => 'success',
            'data' => $user->toArray()
        ]);
    } catch (Exception $e) {
        http_response_code(401);
        echo json_encode([
            'status' => 'error',
            'message' => 'Invalid token',
            'debug' => $e->getMessage() // Remove in production
        ]);
    }
}

/**
 * Generate a JWT token (simplified version for demo purposes)
 */
function generateJWT(int $userId): string {
    // In a real app, this would use proper JWT libraries and secret keys
    $header = base64_encode(json_encode(['alg' => 'HS256', 'typ' => 'JWT']));
    $payload = base64_encode(json_encode([
        'sub' => $userId,
        'iat' => time(),
        'exp' => time() + (60 * 60 * 24) // 24 hours
    ]));
    
    // In a real app, you'd use a secure secret and proper signing
    $signature = base64_encode(hash_hmac('sha256', "$header.$payload", 'mpbh_secret_key', true));
    
    return "$header.$payload.$signature";
}

/**
 * Verify a JWT token (simplified)
 */
function verifyJWT(string $token): int {
    $parts = explode('.', $token);
    
    if (count($parts) !== 3) {
        throw new Exception('Invalid token format');
    }
    
    // For the simplified approach, we're just extracting the user ID
    // A real implementation would validate signature and check expiration
    $payload = json_decode(base64_decode($parts[1]), true);
    
    if (!isset($payload['sub']) || !is_numeric($payload['sub'])) {
        throw new Exception('Invalid token payload');
    }
    
    return (int) $payload['sub'];
}
